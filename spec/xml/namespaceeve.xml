<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen version="1.8.9.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd">
  <compounddef id="namespaceeve" kind="namespace" language="C++">
    <compoundname>eve</compoundname>
    <innerclass prot="public" refid="classeve_1_1Application">eve::Application</innerclass>
    <innerclass prot="public" refid="classeve_1_1Array">eve::Array</innerclass>
    <innerclass prot="public" refid="classeve_1_1BasicEffect">eve::BasicEffect</innerclass>
    <innerclass prot="public" refid="classeve_1_1Blend">eve::Blend</innerclass>
    <innerclass prot="public" refid="classeve_1_1ByteArrayInputStream">eve::ByteArrayInputStream</innerclass>
    <innerclass prot="public" refid="classeve_1_1Color">eve::Color</innerclass>
    <innerclass prot="public" refid="classeve_1_1ColorMask">eve::ColorMask</innerclass>
    <innerclass prot="public" refid="classeve_1_1DepthStencil">eve::DepthStencil</innerclass>
    <innerclass prot="public" refid="classeve_1_1FileInputStream">eve::FileInputStream</innerclass>
    <innerclass prot="public" refid="classeve_1_1Graphics">eve::Graphics</innerclass>
    <innerclass prot="public" refid="classeve_1_1IndexBuffer">eve::IndexBuffer</innerclass>
    <innerclass prot="public" refid="classeve_1_1IndexBufferSafe">eve::IndexBufferSafe</innerclass>
    <innerclass prot="public" refid="classeve_1_1InputStream">eve::InputStream</innerclass>
    <innerclass prot="public" refid="classeve_1_1Integer">eve::Integer</innerclass>
    <innerclass prot="public" refid="classeve_1_1Log">eve::Log</innerclass>
    <innerclass prot="public" refid="classeve_1_1Math">eve::Math</innerclass>
    <innerclass prot="public" refid="classeve_1_1Matrix">eve::Matrix</innerclass>
    <innerclass prot="public" refid="classeve_1_1Rasterizer">eve::Rasterizer</innerclass>
    <innerclass prot="public" refid="classeve_1_1Rect">eve::Rect</innerclass>
    <innerclass prot="public" refid="classeve_1_1Renderable">eve::Renderable</innerclass>
    <innerclass prot="public" refid="classeve_1_1RenderableFormat">eve::RenderableFormat</innerclass>
    <innerclass prot="public" refid="classeve_1_1Screen">eve::Screen</innerclass>
    <innerclass prot="public" refid="classeve_1_1Shader">eve::Shader</innerclass>
    <innerclass prot="public" refid="classeve_1_1ShaderInfo">eve::ShaderInfo</innerclass>
    <innerclass prot="public" refid="classeve_1_1ShaderSource">eve::ShaderSource</innerclass>
    <innerclass prot="public" refid="classeve_1_1String">eve::String</innerclass>
    <innerclass prot="public" refid="classeve_1_1Texture">eve::Texture</innerclass>
    <innerclass prot="public" refid="classeve_1_1TextureHint">eve::TextureHint</innerclass>
    <innerclass prot="public" refid="classeve_1_1TextureInfo">eve::TextureInfo</innerclass>
    <innerclass prot="public" refid="classeve_1_1UniformMetaData">eve::UniformMetaData</innerclass>
    <innerclass prot="public" refid="classeve_1_1UniformType">eve::UniformType</innerclass>
    <innerclass prot="public" refid="classeve_1_1Vector2">eve::Vector2</innerclass>
    <innerclass prot="public" refid="classeve_1_1Vector3">eve::Vector3</innerclass>
    <innerclass prot="public" refid="classeve_1_1Version">eve::Version</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexBuffer">eve::VertexBuffer</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexBufferSafe">eve::VertexBufferSafe</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexMetaData">eve::VertexMetaData</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexPositionColor">eve::VertexPositionColor</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexPositionTexture">eve::VertexPositionTexture</innerclass>
    <innerclass prot="public" refid="classeve_1_1VertexType">eve::VertexType</innerclass>
    <innerclass prot="public" refid="classeve_1_1Viewport">eve::Viewport</innerclass>
    <sectiondef kind="func">
      <memberdef const="no" explicit="no" id="group__ExternC_1gaab3b456094de221820e9e1c32e914c8f" inline="no" kind="function" prot="public" static="no" virt="non-virtual">
        <type>
          <ref kindref="compound" refid="classeve_1_1Application">Application</ref>*</type>
        <definition>Application* eve::createApplication</definition>
        <argsstring>()</argsstring>
        <name>createApplication</name>
        <briefdescription>
          <para>Creates an instance of the application. </para>
        </briefdescription>
        <detaileddescription>
          <para>This is called by the platform and is implemented application side.</para>
          <para>
            <simplesect kind="return">
              <para>
                <ref kindref="compound" refid="classeve_1_1Application">Application</ref>instance. </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription/>
        <location column="1" file="/Users/mike/svn/eve/development/trunk/sdk/inc/platform/application.h" line="123"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
      <para>TODOC. </para>
    </briefdescription>
    <detaileddescription>
      <para>Representation of a platform's screen.</para>
      <para>
        <ref kindref="compound" refid="classeve_1_1Application">Application</ref>interface.</para>
      <para>Represents a 4x4 matrix.</para>
      <para>Input stream superclass.</para>
      <para>An input stream that reads bytes from a file.</para>
      <para>
        <ref kindref="compound" refid="classeve_1_1Texture">Texture</ref>construction object.</para>
      <para>TODO.</para>
      <para>
        <ref kindref="compound" refid="classeve_1_1Shader">Shader</ref>construction object.</para>
      <para>
        <ref kindref="compound" refid="classeve_1_1Renderable">Renderable</ref>interface.</para>
      <para>Defines a rasterizer mode.</para>
      <para>Defines a depth-stencil mode.</para>
      <para>Defines a color.</para>
      <para>Defines a blend mode.</para>
      <para>TODOC</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>TODOC</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2015. All rights reserved.</para>
        </simplesect>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2015. All rights reserved.</para>
        </simplesect>Represents a blend mode using source and destination blend values. Both color and alpha source and destination blend values can be set separately.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents a color using red, green, blue, and alpha values.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents a depth-stencil mode. By default depth buffer is enabled and stencil buffer is disabled. The default depth buffer has writes enabled and passes pixels less than current.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents a rasterizer mode.</para>
      <para>By default front face is defined as counter clockwise and culling is disabled.</para>
      <para>
        <simplesect kind="note">
          <para>Counter clockwise front faces in a right handed co-ordinate system are used by default.</para>
        </simplesect>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>This interface provides methods for renderable objects e.g. 
        <ref kindref="compound" refid="classeve_1_1Screen">
          Screen</ref>and 
        <ref kindref="compound" refid="classeve_1_1Texture">
          Texture</ref>. If a platform does not support rendering of a particular object, getGraphics will return NULL.</para>
      <para>
        <simplesect kind="see">
          <para>
            <ref kindref="compound" refid="classeve_1_1Screen">Screen</ref>
          </para>
        </simplesect>
        <simplesect kind="see">
          <para>
            <ref kindref="compound" refid="classeve_1_1Texture">Texture</ref>
          </para>
        </simplesect>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents 
        <ref kindref="compound" refid="classeve_1_1Shader">
          Shader</ref>information used to construct a 
        <ref kindref="compound" refid="classeve_1_1Shader">
          Shader</ref>instance.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents 
        <ref kindref="compound" refid="classeve_1_1Texture">
          Texture</ref>information used to construct a 
        <ref kindref="compound" refid="classeve_1_1Texture">
          Texture</ref>instance.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Implementation of 
        <ref kindref="compound" refid="classeve_1_1InputStream">
          InputStream</ref>that reads bytes from a file.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2015. All rights reserved.</para>
        </simplesect>Abstract superclass of all classes representing an input stream of bytes. Subclasses of 
        <ref kindref="compound" refid="classeve_1_1InputStream">
          InputStream</ref>must provide read() and available() methods.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2015. All rights reserved.</para>
        </simplesect>This class provides methods for all matrix maths calls.</para>
      <para>
        <simplesect kind="note">
          <para>Generated matrices are right handed by default. Left handed equivalents will be clearly named.</para>
        </simplesect>
        <simplesect kind="note">
          <para>Row major notational convention (also called row vectors) is used. i.e. 30, 31, and 32 represent translation. 00 01 02 03 10 11 12 13 20 21 22 23 30 31 32 33</para>
        </simplesect>This also insinuates pre-multiplication as standard.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Provides device signal callbacks, a game loop and graphics methods. Applications should implement this interface and return an instance to the Platform. An instance is returned using 
        <ref kindref="member" refid="group__ExternC_1gaab3b456094de221820e9e1c32e914c8f">
          eve::createApplication</ref>e.g.
        <linebreak/>
        <ref kindref="compound" refid="classeve_1_1Application">
          eve::Application</ref>* 
        <ref kindref="member" refid="group__ExternC_1gaab3b456094de221820e9e1c32e914c8f">
          eve::createApplication()</ref>{
        <linebreak/>
        return new MyApplication();
        <linebreak/>
        }</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved.</para>
        </simplesect>Represents a physical screen belonging to the platform. Some devices may support more than one 
        <ref kindref="compound" refid="classeve_1_1Screen">
          Screen</ref>e.g. Nintendo DS, iOS AirPlay etc. On desktop platforms a 
        <ref kindref="compound" refid="classeve_1_1Screen">
          Screen</ref>represents a window.</para>
      <para>
        <simplesect kind="author">
          <para>Michael Cowan </para>
        </simplesect>
        <simplesect kind="copyright">
          <para>Copyright (c) Michael Cowan, 2014. All rights reserved. </para>
        </simplesect>
      </para>
    </detaileddescription>
    <location column="1" file="/Users/mike/svn/eve/development/trunk/sdk/inc/containers/array.h" line="15"/>
  </compounddef>
</doxygen>